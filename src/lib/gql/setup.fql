// * Schema must be uploaded before setup script!
// * Please run blocks one at a time to prevent conflicts

// Auth

// Login with only email, for User collection/type
// * consider a refresh token strategy. Currently, we're going w/ a minimal working implementation.
Update(Function('login_user'), {
  body: Query(
    Lambda(
      ['input'],
      Do(
        // Create user if doesn't exist
        If(
          IsEmpty(
            Match(Index('unique_User_email'), Select('email', Var('input')))
          ),
          Create(Collection('User'), {
            data: Var('input'),
          }),
          false
        ),
        // Auth and user info payload
        Let(
          {
            userRef: Select(
              'ref',
              Get(
                Match(Index('unique_User_email'), Select('email', Var('input')))
              )
            ),
            tokenDoc: Create(Tokens(), {
              instance: Var('userRef'),
              // âš™ Adjust access token expiry here
              // ? Need a shorter active token expiry? Typically secure apps go 10m/20m/1hr, if user data security
              ttl: TimeAdd(Now(), 30, 'days'), // doesn't matter in your app, you can increase the access token duration.
            }),
          },
          {
            userInfo: Var('userRef'), // Fauna GraphQL internally codegens Get() using FQL payload's doc ref of the type/collection
            exp: Select('ttl', Var('tokenDoc')),
            token: Select('secret', Var('tokenDoc')),
          }
        )
      )
    )
  ),
})
